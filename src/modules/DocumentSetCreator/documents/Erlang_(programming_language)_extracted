Erlang (programming language) - Wikipedia, the free encyclopedia MediaWiki 1.18wmf1 Edit this page /w/index.php?title=Erlang_(programming_language)&action=edit Edit this page /w/index.php?title=Erlang_(programming_language)&action=edit //en.wikipedia.org/apple-touch-icon.png /favicon.ico /w/opensearch_desc.php Wikipedia (en) //en.wikipedia.org/w/api.php?action=rsd //creativecommons.org/licenses/by-sa/3.0/ Wikipedia Atom feed /w/index.php?title=Special:RecentChanges&feed=atom //bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&lang=en&modules=ext.wikihiero%7Cmediawiki.legacy.commonPrint%2Cshared%7Cskins.vector&only=styles&skin=vector&* //bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&lang=en&modules=site&only=styles&skin=vector&* Erlang (programming language) From Wikipedia, the free encyclopedia Jump to: #mw-head navigation, #p-search search Erlang /wiki/File:Erlang_logo.png Erlang logo.png /wiki/Programming_paradigm Programming paradigm Paradigm(s) /wiki/Multi-paradigm_programming_language Multi-paradigm programming language multi-paradigm: /wiki/Concurrent_programming Concurrent programming concurrent, /wiki/Functional_programming Functional programming functional Appeared in 1986 Designed by /wiki/Ericsson Ericsson Ericsson /wiki/Software_developer Software developer Developer /wiki/Ericsson Ericsson Ericsson /wiki/Software_release_life_cycle Software release life cycle Stable release R15B01 (14 December 2011; 37 days ago (2011-12-14)) /wiki/Type_system Type system Typing discipline /wiki/Type_system Type system dynamic, /wiki/Strong_typing Strong typing strong /wiki/Programming_language_implementation Programming language implementation Major implementations Erlang Influenced by /wiki/Prolog Prolog Prolog Influenced /wiki/Clojure Clojure Clojure, /wiki/Scala_(programming_language) Scala (programming language) Scala, /wiki/Opa_(programming_language) Opa (programming language) Opa /wiki/Software_license Software license License Modified /wiki/Mozilla_Public_License Mozilla Public License MPL Website http://www.erlang.org www.erlang.org /wiki/File:Wikibooks-logo-en.svg Wikibooks logo Wikibooks logo //en.wikibooks.org/wiki/Erlang_Programming wikibooks:Erlang Programming Erlang Programming at /wiki/Wikibooks Wikibooks Wikibooks Erlang is a general-purpose /wiki/Concurrent_computing Concurrent computing concurrent, /wiki/Garbage_collection_(computer_science) Garbage collection (computer science) garbage-collected /wiki/Programming_language Programming language programming language and /wiki/Run_time_system Run time system runtime system. The sequential subset of Erlang is a /wiki/Functional_language Functional language functional language, with /wiki/Strict_evaluation Strict evaluation strict evaluation, /wiki/Assignment_(computer_science)#Single_assignment Assignment (computer science) single assignment, and /wiki/Dynamic_typing Dynamic typing dynamic typing. For concurrency it follows the /wiki/Actor_model Actor model Actor model. It was designed by /wiki/Ericsson Ericsson Ericsson to support distributed, /wiki/Fault-tolerance Fault-tolerance fault-tolerant, /wiki/Real-time_computing#Hard.2C_firm.2C_and_soft_real-time Real-time computing soft-real-time, non-stop applications. It supports /wiki/Hot_swapping Hot swapping hot swapping, so that code can be changed without stopping a system. #cite_note-0 [1] While /wiki/Thread_(computer_science) Thread (computer science) threads are considered to be a complicated and error-prone topic in most languages, Erlang provides language-level features for creating and managing processes with the aim of simplifying concurrent programming. Though all concurrency is explicit in Erlang, processes communicate using /wiki/Message_passing Message passing message passing instead of shared variables, which removes the need for /wiki/Lock_(computer_science) Lock (computer science) locks. The first version was developed by Joe Armstrong in 1986. #cite_note-hopl-1 [2] It was originally a proprietary language within Ericsson, but was released as /wiki/Open_source Open source open source in 1998. Contents #History 1 History #Philosophy 1.1 Philosophy #Functional_programming_examples 2 Functional programming examples #Data_structures 3 Data structures #Concurrency_and_distribution_orientation 4 Concurrency and distribution orientation #Implementation 5 Implementation #Hot_code_loading_and_modules 6 Hot code loading and modules #Distribution 7 Distribution #Projects_using_Erlang 7.1 Projects using Erlang #Clones 8 Clones #References 9 References #Further_reading 10 Further reading #External_links 11 External links [ /w/index.php?title=Erlang_(programming_language)&action=edit&section=1 Edit section: History edit] History The name "Erlang", attributed to Bjarne DŠcker, has been understood either as a reference to Danish mathematician and engineer /wiki/Agner_Krarup_Erlang Agner Krarup Erlang Agner Krarup Erlang, and (initially at least) simultaneously as an abbreviation of "Ericsson Language". #cite_note-hopl-1 [2] #cite_note-2 [3] Erlang was designed with the aim of improving the development of telephony applications. The initial version of Erlang was implemented in /wiki/Prolog Prolog Prolog and was influenced by the programming language /wiki/PLEX_(programming_language) PLEX (programming language) PLEX used in earlier Ericsson exchanges. According to Armstrong, the language went from lab product to real applications following the collapse of the next-generation /wiki/AXE_telephone_exchange AXE telephone exchange AXE exchange named AXE-N in 1995. As a result, Erlang was chosen for the next /wiki/Asynchronous_Transfer_Mode Asynchronous Transfer Mode ATM exchange AXD. #cite_note-hopl-1 [2] In 1998, the Ericsson AXD301 switch was announced, containing over a million lines of Erlang, and reported to achieve a reliability of /wiki/Nines_(engineering) Nines (engineering) nine "9"s. #cite_note-3 [4] Shortly thereafter, Erlang was banned within Ericsson Radio Systems for new products, citing a preference for non-proprietary languages. The ban caused Armstrong and others to leave Ericsson. #cite_note-questions-4 [5] The implementation was open sourced at the end of the year. #cite_note-hopl-1 [2] The ban at Ericsson was eventually lifted, and Armstrong was re-hired by Ericsson in 2004. #cite_note-questions-4 [5] In 2006, native /wiki/Symmetric_multiprocessing Symmetric multiprocessing symmetric multiprocessing support was added to the runtime system and virtual machine. #cite_note-hopl-1 [2] [ /w/index.php?title=Erlang_(programming_language)&action=edit&section=2 Edit section: Philosophy edit] Philosophy The philosophy used to develop Erlang fits equally well with the development of Erlang-based systems. Quoting Mike Williams, one of the three inventors of Erlang: Find the right methodsÑDesign by Prototyping. It is not good enough to have ideas, you must also be able to implement them and know they work. Make mistakes on a small scale, not in a production project. [ /w/index.php?title=Erlang_(programming_language)&action=edit&section=3 Edit section: Functional programming examples edit] Functional programming examples A /wiki/Factorial Factorial factorial algorithm implemented in Erlang: -module(fact). % This is the file 'fact.erl', the module and the filename must match -export([fac/1]). % This exports the function 'fac' of arity 1 (1 parameter, no type, no name) fac(0) -> 1; % If 0, then return 1, otherwise (note the semicolon ; meaning 'else') fac(N) when N > 0, is_integer(N) -> N * fac(N-1). % Recursively determine, then return the result % (note the period . meaning 'endif' or 'function end') A sorting algorithm (similar to /wiki/Quicksort Quicksort quicksort): %% qsort:qsort(List) %% Sort a list of items -module(qsort). % This is the file 'qsort.erl' -export([qsort/1]). % A function 'qsort' with 1 parameter is exported (no type, no name) qsort([]) -> []; % If the list [] is empty, return an empty list (nothing to sort) qsort([Pivot|Rest]) -> % Compose recursively a list with 'Front' for all elements that should be before 'Pivot' % then 'Pivot' then 'Back' for all elements that should be after 'Pivot' qsort([Front || Front <- Rest, Front < Pivot]) ++ [Pivot] ++ qsort([Back || Back <- Rest, Back >= Pivot]). The above example recursively invokes the function qsort until nothing remains to be sorted. The expression [Front || Front <- Rest, Front < Pivot] is a /wiki/List_comprehension List comprehension list comprehension, meaning ÒConstruct a list of elements Front such that Front is a member of Rest, and Front is less than Pivot.Ó ++ is the list concatenation operator. A comparison function can be used for more complicated structures for the sake of readability. The following code would sort lists according to length: % This is file 'listsort.erl' (the compiler is made this way) -module(listsort). % Export 'by_length' with 1 parameter (don't care of the type and name) -export([by_length/1]). by_length(Lists) -> % Use 'qsort/2' and provides an anonymous function as a parameter qsort(Lists, fun(A,B) -> A < B end). qsort([], _)-> []; % If list is empty, return an empty list (ignore the second parameter) qsort([Pivot|Rest], Smaller) -> % Partition list with 'Smaller' elements in front of 'Pivot' and not-'Smaller' elements % after 'Pivot' and sort the sublists. qsort([X || X <- Rest, Smaller(X,Pivot)], Smaller) ++ [Pivot] ++ qsort([Y || Y <- Rest, not(Smaller(Y, Pivot))], Smaller). Here again, a Pivot is taken from the first parameter given to qsort() and the rest of Lists is named Rest. Note that the expression [X || X <- Rest, Smaller(X,Pivot)] is no different in form from [Front || Front <- Rest, Front < Pivot] (in the previous example) except for the use of a comparison function in the last part, saying ÒConstruct a list of elements X such that X is a member of Rest, and Smaller is true", with Smaller being defined earlier as fun(A,B) -> A < B end Note also that the /wiki/Anonymous_function Anonymous function anonymous function is named Smaller in the parameter list of the second definition of qsort so that it can be referenced by that name within that function. It is not named in the first definition of qsort, which deals with the base case of an empty list and thus has no need of this function, let alone a name for it. [ /w/index.php?title=Erlang_(programming_language)&action=edit&section=4 Edit section: Data structures edit] Data structures Erlang has eight primitive data types: Integers: integers are written as sequences of decimal digits, for example, 12, 12375 and -23427 are integers. Integer arithmetic is exact and only limited by available memory on the machine. (This is called /wiki/Arbitrary-precision_arithmetic Arbitrary-precision arithmetic Arbitrary-precision arithmetic.) Atoms: atoms are used within a program to denote distinguished values. They are written as strings of consecutive alphanumeric characters, the first character being a small letter. Atoms can contain any character if they are enclosed within single quotes and an escape convention exists which allows any character to be used within an atom. Floats: floating point numbers use the /wiki/IEEE_754 IEEE 754 IEEE 754 /wiki/64-bit 64-bit 64-bit representation. (Range: ±10308.) References: references are globally unique symbols whose only property is that they can be compared for equality. They are created by evaluating the Erlang primitive make_ref(). Binaries: a binary is a sequence of bytes. Binaries provide a space-efficient way of storing binary data. Erlang primitives exist for composing and decomposing binaries and for efficient input/output of binaries. Pids: Pid is short for Process IdentifierÑa Pid is created by the Erlang primitive spawn(...) Pids are references to Erlang processes. Ports: ports are used to communicate with the external world. Ports are created with the built-in /wiki/Subroutine Subroutine function (BIF) open_port. Messages can be sent to and received from ports, but these messages must obey the so-called "port protocol." Funs : Funs are function closures. Funs are created by expressions of the form: fun(...) -> ... end. And two compound data types: Tuples : tuples are containers for a fixed number of Erlang data types. The syntax {D1,D2,...,Dn} denotes a tuple whose arguments are D1, D2, ... Dn. The arguments can be primitive data types or compound data types. The elements of a tuple can be accessed in constant time. Lists : lists are containers for a variable number of Erlang data types. The syntax [Dh|Dt] denotes a list whose first element is Dh, and whose remaining elements are the list Dt. The syntax [] denotes an empty list. The syntax [D1,D2,..,Dn] is short for [D1|[D2|..|[Dn|[]]]]. The first element of a list can be accessed in constant time. The first element of a list is called the head of the list. The remainder of a list when its head has been removed is called the tail of the list. Two forms of /wiki/Syntactic_sugar Syntactic sugar syntactic sugar are provided: Strings : strings are written as doubly quoted lists of characters, this is syntactic sugar for a list of the integer /wiki/ASCII ASCII ASCII codes for the characters in the string, thus for example, the string "cat" is shorthand for [99,97,116]. It has partial support for unicode strings #cite_note-5 [6] Records : records provide a convenient way for associating a tag with each of the elements in a tuple. This allows us to refer to an element of a tuple by name and not by position. A pre-compiler takes the record definition and replaces it with the appropriate tuple reference. It has no possibility of defining classes althought it has some external libraries for doing that #cite_note-6 [7] [ /w/index.php?title=Erlang_(programming_language)&action=edit&section=5 Edit section: Concurrency and distribution orientation edit] Concurrency and distribution orientation Erlang's main strength is support for /wiki/Concurrency_(computer_science) Concurrency (computer science) concurrency. It has a small but powerful set of primitives to create processes and communicate among them. Processes are the primary means to structure an Erlang application. Erlang processes loosely follow the /wiki/Communicating_sequential_processes Communicating sequential processes communicating sequential processes (CSP) model. They are neither operating system /wiki/Process_(computing) Process (computing) processes nor operating system /wiki/Thread_(computer_science) Thread (computer science) threads, but lightweight processes[ /wiki/Wikipedia:Citation_needed Wikipedia:Citation needed This claim needs references to reliable sources from August 2010 citation needed] somewhat similar to /wiki/Java_(programming_language) Java (programming language) Java's original Ò /wiki/Green_threads Green threads green threadsÓ.[ /wiki/Wikipedia:Please_clarify Wikipedia:Please clarify The text in the vicinity of this tag needs clarification or removal of jargon from August 2010 clarification needed] Like operating system processes (and unlike green threads and operating system threads) they have no shared state between them. The estimated minimal overhead for each is 300 /wiki/Word_(data_type) Word (data type) words; #cite_note-7 [8] thus many of them can be created without degrading performance: a benchmark with 20 million processes has been successfully performed. #cite_note-8 [9] Erlang has supported /wiki/Symmetric_multiprocessing Symmetric multiprocessing symmetric multiprocessing since release R11B of May 2006. /wiki/Inter-process_communication Inter-process communication Inter-process communication works via a shared-nothing /wiki/Asynchronous_method_dispatch Asynchronous method dispatch asynchronous /wiki/Message_passing Message passing message passing system: every process has a ÒmailboxÓ, a /wiki/Queue_(data_structure) Queue (data structure) queue of messages that have been sent by other processes and not yet consumed. A process uses the receive primitive to retrieve messages that match desired patterns. A message-handling routine tests messages in turn against each pattern, until one of them matches. When the message is consumed and removed from the mailbox the process resumes execution. A message may comprise any Erlang structure, including primitives (integers, floats, characters, atoms), tuples, lists, and functions. The code example below shows the built-in support for distributed processes: % Create a process and invoke the function web:start_server(Port, MaxConnections) ServerProcess = spawn(web, start_server, [Port, MaxConnections]), % Create a remote process and invoke the function % web:start_server(Port, MaxConnections) on machine RemoteNode RemoteProcess = spawn(RemoteNode, web, start_server, [Port, MaxConnections]), % Send a message to ServerProcess (asynchronously). The message consists of a tuple % with the atom "pause" and the number "10". ServerProcess ! {pause, 10}, % Receive messages sent to this process receive a_message -> do_something; {data, DataContent} -> handle(DataContent); {hello, Text} -> io:format("Got hello message: ~s", [Text]); {goodbye, Text} -> io:format("Got goodbye message: ~s", [Text]) end. As the example shows, processes may be created on remote nodes, and communication with them is transparent in the sense that communication with remote processes works exactly as communication with local processes. Concurrency supports the primary method of error-handling in Erlang. When a process crashes, it neatly exits and sends a message to the controlling process which can take action. #cite_note-9 [10] #cite_note-10 [11] This way of error handling increases maintainability and reduces complexity of code.[ /wiki/Wikipedia:Citation_needed Wikipedia:Citation needed This claim needs references to reliable sources from April 2010 citation needed] [ /w/index.php?title=Erlang_(programming_language)&action=edit&section=6 Edit section: Implementation edit] Implementation The Ericsson Erlang implementation loads virtual machine /wiki/Bytecode Bytecode bytecode which is converted to /wiki/Threaded_code Threaded code threaded code at load time. It also includes a native code compiler on most platforms, developed by the High Performance Erlang Project (HiPE) at /wiki/Uppsala_University Uppsala University Uppsala University. Since October 2001 the HiPE system is fully integrated in Ericsson's Open Source Erlang/OTP system. #cite_note-11 [12] It also supports interpreting, directly from source code via /wiki/Abstract_syntax_tree Abstract syntax tree abstract syntax tree, via script as of R11B-5. [ /w/index.php?title=Erlang_(programming_language)&action=edit&section=7 Edit section: Hot code loading and modules edit] Hot code loading and modules Code is loaded and managed as "module" units; the module is a /wiki/Compilation_unit Compilation unit compilation unit. The system can keep two versions of a module in memory at the same time, and processes can concurrently run code from each. The versions are referred to as the "new" and the "old" version. A process will not move into the new version until it makes an external call to its module. An example of the mechanism of hot code loading: %% A process whose only job is to keep a counter. %% First version -module(counter). -export([start/0, codeswitch/1]). start() -> loop(0). loop(Sum) -> receive {increment, Count} -> loop(Sum+Count); {counter, Pid} -> Pid ! {counter, Sum}, loop(Sum); code_switch -> ?MODULE:codeswitch(Sum) % Force the use of 'codeswitch/1' from the latest MODULE version end. codeswitch(Sum) -> loop(Sum). For the second version, we add the possibility to reset the count to zero. %% Second version -module(counter). -export([start/0, codeswitch/1]). start() -> loop(0). loop(Sum) -> receive {increment, Count} -> loop(Sum+Count); reset -> loop(0); {counter, Pid} -> Pid ! {counter, Sum}, loop(Sum); code_switch -> ?MODULE:codeswitch(Sum) end. codeswitch(Sum) -> loop(Sum). Only when receiving a message consisting of the atom 'code_switch' will the loop execute an external call to codeswitch/1 (?MODULE is a preprocessor macro for the current module). If there is a new version of the "counter" module in memory, then its codeswitch/1 function will be called. The practice of having a specific entry-point into a new version allows the programmer to transform state to what is required in the newer version. In our example we keep the state as an integer. In practice, systems are built up using design principles from the Open Telecom Platform which leads to more code upgradable designs. Successful hot code loading is a tricky subject; code needs to be written to make use of Erlang's facilities. [ /w/index.php?title=Erlang_(programming_language)&action=edit&section=8 Edit section: Distribution edit] Distribution In 1998, Ericsson released Erlang as /wiki/Open_source Open source open source to ensure its independence from a single vendor and to increase awareness of the language. Erlang, together with libraries and the real-time distributed database /wiki/Mnesia Mnesia Mnesia, forms the /wiki/Open_Telecom_Platform Open Telecom Platform Open Telecom Platform (OTP) collection of libraries. Ericsson and a few other companies offer commercial support for Erlang. Since the open source release, Erlang has been used by several firms worldwide, including /wiki/Nortel_Networks Nortel Networks Nortel and /wiki/T-Mobile T-Mobile T-Mobile. #cite_note-12 [13] Although Erlang was designed to fill a niche and has remained an obscure language for most of its existence, its popularity is growing due to demand for concurrent services. #cite_note-13 [14] #cite_note-14 [15] Erlang has found some use in fielding /wiki/MMORPG MMORPG MMORPG servers. #cite_note-15 [16] Erlang is available for many /wiki/Unix-like Unix-like Unix-like operating systems, including /wiki/Mac_OS_X Mac OS X Mac OS X, as well as /wiki/Microsoft_Windows Microsoft Windows Microsoft Windows. [ /w/index.php?title=Erlang_(programming_language)&action=edit&section=9 Edit section: Projects using Erlang edit] Projects using Erlang Projects using Erlang include: Database (distributed): /wiki/CouchDB CouchDB CouchDB, a document based database that uses /wiki/MapReduce MapReduce MapReduce /wiki/Membase Membase Membase, database management system optimized for storing data behind interactive web applications. /wiki/Riak Riak Riak, a distributed database /wiki/SimpleDB SimpleDB SimpleDB, a distributed database that is part of /wiki/Amazon_Web_Services Amazon Web Services Amazon Web Services #cite_note-16 [17] Chat: /wiki/Ejabberd Ejabberd ejabberd, an /wiki/Extensible_Messaging_and_Presence_Protocol Extensible Messaging and Presence Protocol Extensible Messaging and Presence Protocol (XMPP) instant messaging server /wiki/Facebook_Chat Facebook Chat Facebook Chat system, #cite_note-17 [18] based on ejabberd #cite_note-18 [19] CMS: /wiki/Zotonic Zotonic Zotonic, a Content Management System and Web-Framework Queue: /wiki/RabbitMQ RabbitMQ RabbitMQ, an implementation of /wiki/Advanced_Message_Queuing_Protocol Advanced Message Queuing Protocol Advanced Message Queuing Protocol (AMQP) Desktop: /wiki/Wings_3D Wings 3D Wings 3D, a 3D modeller Web Servers: /wiki/Yaws_(web_server) Yaws (web server) Yaws web server Tools http://tsung.erlang-projects.org Tsung open-source multi-protocol distributed load testing tool Mobile: /wiki/WhatsApp WhatsApp WhatsApp, mobile messenger Enterprises: /wiki/GitHub GitHub GitHub egitd, #cite_note-19 [20] a replacement for stock git-daemon that ships with /wiki/Git_(software) Git (software) Git /wiki/Issuu Issuu Issuu, an online digital publisher[ /wiki/Wikipedia:Citation_needed Wikipedia:Citation needed This claim needs references to reliable sources from January 2011 citation needed] /wiki/Twitterfall Twitterfall Twitterfall, a service to view trends and patterns from /wiki/Twitter Twitter Twitter #cite_note-20 [21] #cite_note-21 [22] /wiki/Goldman_Sachs Goldman Sachs Goldman Sachs used /wiki/Erlang Erlang Erlang for the /wiki/High-frequency_trading High-frequency trading high-frequency trading programs. [ /w/index.php?title=Erlang_(programming_language)&action=edit&section=10 Edit section: Clones edit] Clones Erlang has inspired clones of its concurrency facilities for other languages: /wiki/Reia_(programming_language) Reia (programming language) Reia /wiki/Scala_(programming_language) Scala (programming language) Scala /wiki/Dart_(programming_language) Dart (programming language) Dart [ /w/index.php?title=Erlang_(programming_language)&action=edit&section=11 Edit section: References edit] References #cite_ref-0 ^ Joe Armstrong, Bjarne DŠcker, Thomas Lindgren, HŒkan Millroth. http://ftp.sunet.se/pub/lang/erlang/white_paper.html "Open-source Erlang - White Paper". http://ftp.sunet.se/pub/lang/erlang/white_paper.html http://ftp.sunet.se/pub/lang/erlang/white_paper.html. Retrieved 31 July 2011. ctx_ver=Z39.88-2004&rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&rft.genre=bookitem&rft.btitle=Open-source+Erlang+-+White+Paper&rft.atitle=&rft.aulast=Joe+Armstrong%2C+Bjarne+D%C3%A4cker%2C+Thomas+Lindgren%2C+H%C3%A5kan+Millroth&rft.au=Joe+Armstrong%2C+Bjarne+D%C3%A4cker%2C+Thomas+Lindgren%2C+H%C3%A5kan+Millroth&rft_id=http%3A%2F%2Fftp.sunet.se%2Fpub%2Flang%2Ferlang%2Fwhite_paper.html&rfr_id=info:sid/en.wikipedia.org:Erlang_(programming_language)   ^ #cite_ref-hopl_1-0 a #cite_ref-hopl_1-1 b #cite_ref-hopl_1-2 c #cite_ref-hopl_1-3 d #cite_ref-hopl_1-4 e Joe Armstrong, "History of Erlang", in HOPL III: Proceedings of the third ACM SIGPLAN conference on History of programming languages, 2007, /wiki/Special:BookSources/978159593766X ISBN 978-1-59593-766-X #cite_ref-2 ^ http://www.erlang.org/pipermail/erlang-questions/1999-February/000098.html Erlang, the mathematician? #cite_ref-3 ^ http://ll2.ai.mit.edu/talks/armstrong.pdf "Concurrency Oriented Programming in Erlang". 2 November 2002. http://ll2.ai.mit.edu/talks/armstrong.pdf http://ll2.ai.mit.edu/talks/armstrong.pdf. ctx_ver=Z39.88-2004&rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&rft.genre=bookitem&rft.btitle=Concurrency+Oriented+Programming+in+Erlang&rft.atitle=&rft.date=2+November+2002&rft_id=http%3A%2F%2Fll2.ai.mit.edu%2Ftalks%2Farmstrong.pdf&rfr_id=info:sid/en.wikipedia.org:Erlang_(programming_language)   ^ #cite_ref-questions_4-0 a #cite_ref-questions_4-1 b http://erlang.org/pipermail/erlang-questions/2006-July/021336.html "question about Erlang's future". 6 July 2010. http://erlang.org/pipermail/erlang-questions/2006-July/021336.html http://erlang.org/pipermail/erlang-questions/2006-July/021336.html. ctx_ver=Z39.88-2004&rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&rft.genre=bookitem&rft.btitle=question+about+Erlang%27s+future&rft.atitle=&rft.date=6+July+2010&rft_id=http%3A%2F%2Ferlang.org%2Fpipermail%2Ferlang-questions%2F2006-July%2F021336.html&rfr_id=info:sid/en.wikipedia.org:Erlang_(programming_language)   #cite_ref-5 ^ http://erlang.org/doc/apps/stdlib/unicode_usage.html Unicode usage in Erlang official page #cite_ref-6 ^ https://code.google.com/p/ect/ Erlang Class Transformation project #cite_ref-7 ^ http://www.erlang.org/doc/efficiency_guide/processes.html "Erlang Efficiency Guide - Processes". http://www.erlang.org/doc/efficiency_guide/processes.html http://www.erlang.org/doc/efficiency_guide/processes.html. ctx_ver=Z39.88-2004&rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&rft.genre=bookitem&rft.btitle=Erlang+Efficiency+Guide+-+Processes&rft.atitle=&rft_id=http%3A%2F%2Fwww.erlang.org%2Fdoc%2Fefficiency_guide%2Fprocesses.html&rfr_id=info:sid/en.wikipedia.org:Erlang_(programming_language)   #cite_ref-8 ^ Ulf Wiger (14 November 2005). http://groups.google.com/group/comp.lang.functional/msg/33b7a62afb727a4f?dmode=source "Stress-testing erlang". comp.lang.functional.misc. http://groups.google.com/group/comp.lang.functional/msg/33b7a62afb727a4f?dmode=source http://groups.google.com/group/comp.lang.functional/msg/33b7a62afb727a4f?dmode=source. Retrieved 25 August 2006. ctx_ver=Z39.88-2004&rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&rft.genre=bookitem&rft.btitle=Stress-testing+erlang&rft.atitle=comp.lang.functional.misc&rft.aulast=Ulf+Wiger&rft.au=Ulf+Wiger&rft.date=14+November+2005&rft_id=http%3A%2F%2Fgroups.google.com%2Fgroup%2Fcomp.lang.functional%2Fmsg%2F33b7a62afb727a4f%3Fdmode%3Dsource&rfr_id=info:sid/en.wikipedia.org:Erlang_(programming_language)   #cite_ref-9 ^ Joe Armstrong. http://www.erlang.org/doc/getting_started/robustness.html "Erlang robustness". http://www.erlang.org/doc/getting_started/robustness.html http://www.erlang.org/doc/getting_started/robustness.html. Retrieved 15 July 2010. ctx_ver=Z39.88-2004&rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&rft.genre=bookitem&rft.btitle=Erlang+robustness&rft.atitle=&rft.aulast=Joe+Armstrong&rft.au=Joe+Armstrong&rft_id=http%3A%2F%2Fwww.erlang.org%2Fdoc%2Fgetting_started%2Frobustness.html&rfr_id=info:sid/en.wikipedia.org:Erlang_(programming_language)   #cite_ref-10 ^ http://www.erlang.org/doc/design_principles/sup_princ.html "Erlang Supervision principles". http://www.erlang.org/doc/design_principles/sup_princ.html http://www.erlang.org/doc/design_principles/sup_princ.html. Retrieved 15 July 2010. ctx_ver=Z39.88-2004&rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&rft.genre=bookitem&rft.btitle=Erlang+Supervision+principles&rft.atitle=&rft_id=http%3A%2F%2Fwww.erlang.org%2Fdoc%2Fdesign_principles%2Fsup_princ.html&rfr_id=info:sid/en.wikipedia.org:Erlang_(programming_language)   #cite_ref-11 ^ http://www.it.uu.se/research/group/hipe/ "High Performance Erlang". http://www.it.uu.se/research/group/hipe/ http://www.it.uu.se/research/group/hipe/. Retrieved 26 March 2011. ctx_ver=Z39.88-2004&rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&rft.genre=bookitem&rft.btitle=High+Performance+Erlang&rft.atitle=&rft_id=http%3A%2F%2Fwww.it.uu.se%2Fresearch%2Fgroup%2Fhipe%2F&rfr_id=info:sid/en.wikipedia.org:Erlang_(programming_language)   #cite_ref-12 ^ http://www.erlang.org/faq/faq.html#AEN50 "Who uses Erlang for product development?". Frequently asked questions about Erlang. http://www.erlang.org/faq/faq.html#AEN50 http://www.erlang.org/faq/faq.html#AEN50. Retrieved 16 July 2007. "The largest user of Erlang is (surprise!) Ericsson. Ericsson use it to write software used in telecommunications systems. Many dozens projects have used it, a particularly large one is the extremely scalable AXD301 ATM switch. Other commercial users listed as part of the FAQ include: Nortel, Deutsche Flugsicherung (the German national /wiki/Air_traffic_control Air traffic control air traffic control organisation), and T-Mobile." ctx_ver=Z39.88-2004&rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&rft.genre=bookitem&rft.btitle=Who+uses+Erlang+for+product+development%3F&rft.atitle=Frequently+asked+questions+about+Erlang&rft_id=http%3A%2F%2Fwww.erlang.org%2Ffaq%2Ffaq.html%23AEN50&rfr_id=info:sid/en.wikipedia.org:Erlang_(programming_language)   #cite_ref-13 ^ http://www.ddj.com/linux-open-source/201001928?cid=RSSfeed_DDJ_OpenSource "Programming Erlang". http://www.ddj.com/linux-open-source/201001928?cid=RSSfeed_DDJ_OpenSource http://www.ddj.com/linux-open-source/201001928?cid=RSSfeed_DDJ_OpenSource. Retrieved 13 December 2008. "Virtually all language use shared state concurrency. This is very difficult and leads to terrible problems when you handle failure and scale up the system...Some pretty fast-moving startups in the financial world have latched onto Erlang; for example, the Swedish www.kreditor.se." ctx_ver=Z39.88-2004&rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&rft.genre=bookitem&rft.btitle=Programming+Erlang&rft.atitle=&rft_id=http%3A%2F%2Fwww.ddj.com%2Flinux-open-source%2F201001928%3Fcid%3DRSSfeed_DDJ_OpenSource&rfr_id=info:sid/en.wikipedia.org:Erlang_(programming_language)   #cite_ref-14 ^ http://www.cincomsmalltalk.com/userblogs/ralph/blogView?showComments=true&entry=3364027251 "Erlang, the next Java". http://www.cincomsmalltalk.com/userblogs/ralph/blogView?showComments=true&entry=3364027251 http://www.cincomsmalltalk.com/userblogs/ralph/blogView?showComments=true&entry=3364027251. Retrieved 8 October 2008. "I do not believe that other languages can catch up with Erlang anytime soon. It will be easy for them to add language features to be like Erlang. It will take a long time for them to build such a high-quality VM and the mature libraries for concurrency and reliability. So, Erlang is poised for success. If you want to build a multicore application in the next few years, you should look at Erlang." ctx_ver=Z39.88-2004&rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&rft.genre=bookitem&rft.btitle=Erlang%2C+the+next+Java&rft.atitle=&rft_id=http%3A%2F%2Fwww.cincomsmalltalk.com%2Fuserblogs%2Fralph%2FblogView%3FshowComments%3Dtrue%26entry%3D3364027251&rfr_id=info:sid/en.wikipedia.org:Erlang_(programming_language)   #cite_ref-15 ^ Clarke, Gavin (5 Feb 2011). http://www.theregister.co.uk/2011/02/05/battlestar_galactica_mmp/ "Battlestar Galactica vets needed for online roleplay" (HTML). Music and Media. /wiki/The_Reg The Reg The Reg. http://www.theregister.co.uk/2011/02/05/battlestar_galactica_mmp/ http://www.theregister.co.uk/2011/02/05/battlestar_galactica_mmp/. Retrieved 8 February 2011. ctx_ver=Z39.88-2004&rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&rft.genre=bookitem&rft.btitle=Battlestar+Galactica+vets+needed+for+online+roleplay&rft.atitle=Music+and+Media&rft.aulast=Clarke&rft.aufirst=Gavin&rft.au=Clarke%2C%26%2332%3BGavin&rft.date=5+Feb+2011&rft.pub=%5B%5BThe+Reg%5D%5D&rft_id=http%3A%2F%2Fwww.theregister.co.uk%2F2011%2F02%2F05%2Fbattlestar_galactica_mmp%2F&rfr_id=info:sid/en.wikipedia.org:Erlang_(programming_language)   #cite_ref-16 ^ http://www.satine.org/archives/2007/12/13/amazon-simpledb/ What You Need To Know About Amazon SimpleDB #cite_ref-17 ^ http://www.facebook.com/note.php?note_id=16787213919&id=9445547199&index=2 http://www.facebook.com/note.php?note_id=16787213919&id=9445547199&index=2 #cite_ref-18 ^ http://developers.facebook.com/news.php?blog=1&story=110 http://developers.facebook.com/news.php?blog=1&story=110 #cite_ref-19 ^ http://github.com/blog/112-supercharged-git-daemon http://github.com/blog/112-supercharged-git-daemon #cite_ref-20 ^ http://twitter.com/jalada/status/1206606823 http://twitter.com/jalada/status/1206606823 #cite_ref-21 ^ http://twitter.com/jalada/statuses/1234217518 http://twitter.com/jalada/statuses/1234217518 [ /w/index.php?title=Erlang_(programming_language)&action=edit&section=12 Edit section: Further reading edit] Further reading Joe Armstrong (2003). http://www.sics.se/~joe/thesis/armstrong_thesis_2003.pdf Making reliable distributed systems in the presence of software errors. Ph.D. Dissertation. The Royal Institute of Technology, Stockholm, Sweden. http://www.sics.se/~joe/thesis/armstrong_thesis_2003.pdf http://www.sics.se/~joe/thesis/armstrong_thesis_2003.pdf. ctx_ver=Z39.88-2004&rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&rft.genre=book&rft.btitle=Making+reliable+distributed+systems+in+the+presence+of+software+errors&rft.aulast=Joe+Armstrong&rft.au=Joe+Armstrong&rft.date=2003&rft.series=Ph.D.+Dissertation&rft.pub=The+Royal+Institute+of+Technology%2C+Stockholm%2C+Sweden&rft_id=http%3A%2F%2Fwww.sics.se%2F%7Ejoe%2Fthesis%2Farmstrong_thesis_2003.pdf&rfr_id=info:sid/en.wikipedia.org:Erlang_(programming_language)   Armstrong, J. (2007). "A history of Erlang". Proceedings of the third ACM SIGPLAN conference on History of programming languages - HOPL III. pp. 6Ð1. /wiki/Digital_object_identifier Digital object identifier doi: http://dx.doi.org/10.1145%2F1238844.1238850 10.1145/1238844.1238850. /wiki/International_Standard_Book_Number International Standard Book Number ISBN  /wiki/Special:BookSources/978159593766X Special:BookSources/978159593766X 978159593766X. ctx_ver=Z39.88-2004&rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&rft.genre=bookitem&rft.btitle=A+history+of+Erlang&rft.atitle=Proceedings+of+the+third+ACM+SIGPLAN+conference+on+History+of+programming+languages++-+HOPL+III&rft.aulast=Armstrong&rft.aufirst=J.&rft.au=Armstrong%2C%26%2332%3BJ.&rft.date=2007&rft.pages=pp.+6%E2%80%931&rft_id=info:doi/10.1145%2F1238844.1238850&rft.isbn=978159593766X&rfr_id=info:sid/en.wikipedia.org:Erlang_(programming_language)   //en.wikipedia.org/w/index.php?title=Template:Cite_doi/10.1145.2F1238844.1238850&action=edit&editintro=Template:Cite_doi/editintro2 edit http://www.erlang.se/publications/bjarnelic.pdf Early history of Erlang by Bjarne DŠcker "Mnesia - A distributed robust DBMS for telecommunications applications". First International Workshop on Practical Aspects of Declarative Languages (PADL '99): 152Ð163. 1999. ctx_ver=Z39.88-2004&rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&rft.genre=article&rft.atitle=Mnesia+-+A+distributed+robust+DBMS+for+telecommunications+applications&rft.jtitle=First+International+Workshop+on+Practical+Aspects+of+Declarative+Languages+%28PADL+%2799%29&rft.date=1999&rft.pages=152%E2%80%93163&rfr_id=info:sid/en.wikipedia.org:Erlang_(programming_language)   Armstrong, Joe; Virding, Robert; Williams, Mike; Wikstrom, Claes (16 January 1996). http://www.erlang.org/erlang_book_toc.html Concurrent Programming in Erlang (2nd ed.). /wiki/Prentice_Hall Prentice Hall Prentice Hall. pp. 358. /wiki/International_Standard_Book_Number International Standard Book Number ISBN  /wiki/Special:BookSources/9780135083017 Special:BookSources/9780135083017 9780135083017. http://www.erlang.org/erlang_book_toc.html http://www.erlang.org/erlang_book_toc.html. ctx_ver=Z39.88-2004&rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&rft.genre=book&rft.btitle=Concurrent+Programming+in+Erlang&rft.aulast=Armstrong&rft.aufirst=Joe&rft.au=Armstrong%2C%26%2332%3BJoe&rft.au=Virding%2C%26%2332%3BRobert&rft.au=Williams%2C%26%2332%3BMike&rft.au=Wikstrom%2C%26%2332%3BClaes&rft.date=16+January+1996&rft.pages=pp.%26nbsp%3B358&rft.edition=2nd&rft.pub=%5B%5BPrentice+Hall%5D%5D&rft.isbn=9780135083017&rft_id=http%3A%2F%2Fwww.erlang.org%2Ferlang_book_toc.html&rfr_id=info:sid/en.wikipedia.org:Erlang_(programming_language)   Armstrong, Joe (11 July 2007). http://pragprog.com/titles/jaerlang/programming-erlang Programming Erlang: Software for a Concurrent World (1st ed.). /wiki/Pragmatic_Bookshelf Pragmatic Bookshelf Pragmatic Bookshelf. pp. 536. /wiki/International_Standard_Book_Number International Standard Book Number ISBN  /wiki/Special:BookSources/9781934356005 Special:BookSources/9781934356005 9781934356005. http://pragprog.com/titles/jaerlang/programming-erlang http://pragprog.com/titles/jaerlang/programming-erlang. ctx_ver=Z39.88-2004&rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&rft.genre=book&rft.btitle=Programming+Erlang%3A+Software+for+a+Concurrent+World&rft.aulast=Armstrong&rft.aufirst=Joe&rft.au=Armstrong%2C%26%2332%3BJoe&rft.date=11+July+2007&rft.pages=pp.%26nbsp%3B536&rft.edition=1st&rft.pub=%5B%5BPragmatic+Bookshelf%5D%5D&rft.isbn=9781934356005&rft_id=http%3A%2F%2Fpragprog.com%2Ftitles%2Fjaerlang%2Fprogramming-erlang&rfr_id=info:sid/en.wikipedia.org:Erlang_(programming_language)   Thompson, Simon J.; Cesarini, Francesco (19 June 2009). http://www.erlangprogramming.org Erlang Programming: A Concurrent Approach to Software Development (1st ed.). Sebastopol, California: /wiki/O%27Reilly_Media O'Reilly Media O'Reilly Media, Inc. pp. 496. /wiki/International_Standard_Book_Number International Standard Book Number ISBN  /wiki/Special:BookSources/978059651818 Special:BookSources/978059651818 978059651818. http://www.erlangprogramming.org http://www.erlangprogramming.org. ctx_ver=Z39.88-2004&rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&rft.genre=book&rft.btitle=Erlang+Programming%3A+A+Concurrent+Approach+to+Software+Development&rft.aulast=Thompson&rft.aufirst=Simon+J.&rft.au=Thompson%2C%26%2332%3BSimon+J.&rft.au=Cesarini%2C%26%2332%3BFrancesco&rft.date=19+June+2009&rft.pages=pp.%26nbsp%3B496&rft.edition=1st&rft.place=Sebastopol%2C+California&rft.pub=%5B%5BO%27Reilly+Media%5D%5D%2C+Inc&rft.isbn=978059651818&rft_id=http%3A%2F%2Fwww.erlangprogramming.org&rfr_id=info:sid/en.wikipedia.org:Erlang_(programming_language)   Cant, Geoff (1 March 2010). http://www.apress.com/book/view/9781430227694 Mastering Erlang: Writing Real World Applications (1st ed.). /wiki/Apress Apress Apress. pp. 350. /wiki/International_Standard_Book_Number International Standard Book Number ISBN  /wiki/Special:BookSources/9781430227694 Special:BookSources/9781430227694 9781430227694. http://www.apress.com/book/view/9781430227694 http://www.apress.com/book/view/9781430227694. ctx_ver=Z39.88-2004&rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&rft.genre=book&rft.btitle=Mastering+Erlang%3A+Writing+Real+World+Applications&rft.aulast=Cant&rft.aufirst=Geoff&rft.au=Cant%2C%26%2332%3BGeoff&rft.date=1+March+2010&rft.pages=pp.%26nbsp%3B350&rft.edition=1st&rft.pub=%5B%5BApress%5D%5D&rft.isbn=9781430227694&rft_id=htt